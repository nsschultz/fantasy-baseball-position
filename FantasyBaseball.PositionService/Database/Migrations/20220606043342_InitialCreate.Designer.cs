// <auto-generated />
using FantasyBaseball.PositionService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FantasyBaseball.PositionService.Database.Migrations
{
    [DbContext(typeof(PositionContext))]
    [Migration("20220606043342_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FantasyBaseball.PositionService.Entities.AdditionalPositionEntity", b =>
                {
                    b.Property<string>("ParentCode")
                        .HasColumnType("character varying(4)");

                    b.Property<string>("ChildCode")
                        .HasColumnType("character varying(4)");

                    b.HasKey("ParentCode", "ChildCode")
                        .HasName("AdditionalPosition_PK");

                    b.HasIndex("ChildCode");

                    b.ToTable("AdditionalPositions");

                    b.HasData(
                        new
                        {
                            ParentCode = "C",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "1B",
                            ChildCode = "CIF"
                        },
                        new
                        {
                            ParentCode = "1B",
                            ChildCode = "IF"
                        },
                        new
                        {
                            ParentCode = "1B",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "2B",
                            ChildCode = "MIF"
                        },
                        new
                        {
                            ParentCode = "2B",
                            ChildCode = "IF"
                        },
                        new
                        {
                            ParentCode = "2B",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "3B",
                            ChildCode = "CIF"
                        },
                        new
                        {
                            ParentCode = "3B",
                            ChildCode = "IF"
                        },
                        new
                        {
                            ParentCode = "3B",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "SS",
                            ChildCode = "MIF"
                        },
                        new
                        {
                            ParentCode = "SS",
                            ChildCode = "IF"
                        },
                        new
                        {
                            ParentCode = "SS",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "CIF",
                            ChildCode = "IF"
                        },
                        new
                        {
                            ParentCode = "CIF",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "MIF",
                            ChildCode = "IF"
                        },
                        new
                        {
                            ParentCode = "MIF",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "IF",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "LF",
                            ChildCode = "OF"
                        },
                        new
                        {
                            ParentCode = "LF",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "CF",
                            ChildCode = "OF"
                        },
                        new
                        {
                            ParentCode = "CF",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "RF",
                            ChildCode = "OF"
                        },
                        new
                        {
                            ParentCode = "RF",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "OF",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "DH",
                            ChildCode = "UTIL"
                        },
                        new
                        {
                            ParentCode = "SP",
                            ChildCode = "P"
                        },
                        new
                        {
                            ParentCode = "RP",
                            ChildCode = "P"
                        });
                });

            modelBuilder.Entity("FantasyBaseball.PositionService.Entities.PositionEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("FullName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("PlayerType")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Code")
                        .HasName("Position_PK");

                    b.HasIndex("SortOrder")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Code = "",
                            FullName = "Unknown",
                            PlayerType = 0,
                            SortOrder = 2147483647
                        },
                        new
                        {
                            Code = "C",
                            FullName = "Catcher",
                            PlayerType = 1,
                            SortOrder = 0
                        },
                        new
                        {
                            Code = "1B",
                            FullName = "First Baseman",
                            PlayerType = 1,
                            SortOrder = 1
                        },
                        new
                        {
                            Code = "2B",
                            FullName = "Second Baseman",
                            PlayerType = 1,
                            SortOrder = 2
                        },
                        new
                        {
                            Code = "3B",
                            FullName = "Third Baseman",
                            PlayerType = 1,
                            SortOrder = 3
                        },
                        new
                        {
                            Code = "SS",
                            FullName = "Shortstop",
                            PlayerType = 1,
                            SortOrder = 4
                        },
                        new
                        {
                            Code = "CIF",
                            FullName = "Corner Infielder",
                            PlayerType = 1,
                            SortOrder = 5
                        },
                        new
                        {
                            Code = "MIF",
                            FullName = "Middle Infielder",
                            PlayerType = 1,
                            SortOrder = 6
                        },
                        new
                        {
                            Code = "IF",
                            FullName = "Infielder",
                            PlayerType = 1,
                            SortOrder = 7
                        },
                        new
                        {
                            Code = "LF",
                            FullName = "Left Fielder",
                            PlayerType = 1,
                            SortOrder = 8
                        },
                        new
                        {
                            Code = "CF",
                            FullName = "Center Feilder",
                            PlayerType = 1,
                            SortOrder = 9
                        },
                        new
                        {
                            Code = "RF",
                            FullName = "Right Fielder",
                            PlayerType = 1,
                            SortOrder = 10
                        },
                        new
                        {
                            Code = "OF",
                            FullName = "Outfielder",
                            PlayerType = 1,
                            SortOrder = 11
                        },
                        new
                        {
                            Code = "DH",
                            FullName = "Designated Hitter",
                            PlayerType = 1,
                            SortOrder = 12
                        },
                        new
                        {
                            Code = "UTIL",
                            FullName = "Utility",
                            PlayerType = 1,
                            SortOrder = 13
                        },
                        new
                        {
                            Code = "SP",
                            FullName = "Starting Pitcher",
                            PlayerType = 2,
                            SortOrder = 100
                        },
                        new
                        {
                            Code = "RP",
                            FullName = "Relief Pitcher",
                            PlayerType = 2,
                            SortOrder = 101
                        },
                        new
                        {
                            Code = "P",
                            FullName = "Pitcher",
                            PlayerType = 2,
                            SortOrder = 102
                        });
                });

            modelBuilder.Entity("FantasyBaseball.PositionService.Entities.AdditionalPositionEntity", b =>
                {
                    b.HasOne("FantasyBaseball.PositionService.Entities.PositionEntity", "ChildPosition")
                        .WithMany("ChildPositions")
                        .HasForeignKey("ChildCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AdditionalPosition_ChildPosition_FK");

                    b.HasOne("FantasyBaseball.PositionService.Entities.PositionEntity", "ParentPosition")
                        .WithMany("ParentPositions")
                        .HasForeignKey("ParentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AdditionalPosition_ParentPosition_FK");

                    b.Navigation("ChildPosition");

                    b.Navigation("ParentPosition");
                });

            modelBuilder.Entity("FantasyBaseball.PositionService.Entities.PositionEntity", b =>
                {
                    b.Navigation("ChildPositions");

                    b.Navigation("ParentPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
